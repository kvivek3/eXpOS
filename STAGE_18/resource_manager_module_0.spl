alias functionNum R1;
alias currentPID R2;

//---------------------------AQUIRE_TERMINAL---------------------------------
if(functionNum==8) then
	while([TERMINAL_STATUS_TABLE]==1) do
		//changing the state to wait_terminal
		[PROCESS_TABLE+currentPID*16+4]=WAIT_TERMINAL;
		multipush(R1,R2);

		//calling scheduler
		call MOD_5;

		multipop(R1,R2);
	endwhile;
[TERMINAL_STATUS_TABLE]=1;
[TERMINAL_STATUS_TABLE+1]=currentPID;
return;
endif;

//-------------------------RELEASE_TERMINAL--------------------------------
if(functionNum==9) then
	if(currentPID!=[TERMINAL_STATUS_TABLE+1]) then
		alias return_value R0;
		return_value=-1;
		return;
	endif;

	[TERMINAL_STATUS_TABLE]=0;
	alias PID R4;
	alias status R5;
	PID=1;
	while(PID<=15) do
		status=[PROCESS_TABLE+PID*16+4];
		if(status==WAIT_TERMINAL) then
			[PROCESS_TABLE+PID*16+4]=READY;
		endif;
		PID=PID+1;
	endwhile;
	alias return_value R0;
	return_value=0;
	return;
endif;

//----------------------------------------------------------------------------

//-----------------------------ACQUIRE_DISK----FUNCNUM=3-------------------------------
if(functionNum==3) then
	while([DISK_STATUS_TABLE]==1) do
		[PROCESS_TABLE+currentPID*16+4]=WAIT_DISK;
		multipush(R1,R2);
		call MOD_5;
		multipop(R1,R2);
	endwhile;
	[DISK_STATUS_TABLE]=1;
	[DISK_STATUS_TABLE+4]=currentPID;
	return;
endif;
		
