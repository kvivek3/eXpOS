alias funcNum R1;
alias currentPID R2;

//------------------------free user area page----------------------------------
if(funcNum==2) then
	alias userAreaPage R3;
	userAreaPage=[PROCESS_TABLE+currentPID*16+11];
	alias pprt R4;
	pprt=userAreaPage*512+496;
	alias iter R5;
	iter=0;
	while(iter<8) do
		if([pprt+2*iter]==1) then
			multipush(R0,R1,R2,R3,R4,R5);
			R1=7;
			R2=currentPID;
			R3=[pprt+2*iter+1];
			call MOD_0;
			multipop(R0,R1,R2,R3,R4,R5);
		endif;
		//calling close function of file manager module
		if([pprt+2*iter]==0) then
			multipush(R0,R1,R2,R3,R4,R5);
			R1=4;
			R2=[pprt+2*iter+1];
			call MOD_3;
			multipop(R0,R1,R2,R3,R4,R5);
		endif;
		iter=iter+1;
	endwhile;
	multipush(R1,R2,R3);
	R1=2;
	R2=userAreaPage;
	call MOD_2;
	multipop(R1,R2,R3);
	return;
endif;

//---------------------------------exit process-------------------------------
if(funcNum==3) then
	if([PROCESS_TABLE+currentPID*16+9]!=9) then
		alias PID R3;
		PID=1;
		while(PID<=15) do
			if([PROCESS_TABLE+PID*16+4]==WAIT_PROCESS&&[PROCESS_TABLE+PID*16+5]==currentPID) then
				[PROCESS_TABLE+PID*16+4]=READY;
			endif;
			if([PROCESS_TABLE+PID*16+2]==currentPID) then
				[PROCESS_TABLE+PID*16+2]=-1;
			endif;
			PID=PID+1;
		endwhile;
	endif;
	//calling free pagetable function in process manager module
	multipush(R1,R2);
	R1=4;
	R2=currentPID;
	call MOD_1;
	multipop(R1,R2);
	multipush(R1,R2);
	//invoking free userarea page
	R1=2;
	R2=currentPID;
	call MOD_1;
	multipop(R1,R2);
	[PROCESS_TABLE+currentPID*16+4]=TERMINATED;
	return;
endif;

//-------------------------------free page table------------------------------
if(funcNum==4) then
	alias page_table_entry R3;
	page_table_entry=PAGE_TABLE_BASE+currentPID*20;
	[page_table_entry+0]=-1;
	[page_table_entry+1]="0000";
	[page_table_entry+2]=-1;
    [page_table_entry+3]="0000";
	//realeasing other memory pages
	alias iter R4;
	alias pageNum R5;
	iter=2;
	while(iter<10) do
		pageNum=[page_table_entry+2*iter];
		if([page_table_entry+2*iter]!=-1) then
			//calling release page function of module 2 (memory manager)
			multipush(R1,R2,R3,R4,R5);
			R1=2;
			R2=pageNum;
			call MOD_2;
			multipop(R1,R2,R3,R4,R5);
		endif;
		[page_table_entry+2*iter]=-1;
        [page_table_entry+2*iter+1]="0000";
		iter=iter+1;
	endwhile;
	//releasing heap and stack blocks
	iter=2;
	while(iter<10) do
		if(iter<4||iter>7) then
			if([DISK_MAP_TABLE+currentPID*10+iter]!=-1) then

				//calling release block function
				multipush(R1,R2,R3,R4,R5);
				R1=4;
				R3=currentPID;
				R2=[DISK_MAP_TABLE+currentPID*10+iter];
				call MOD_2;
				multipop(R1,R2,R3,R4,R5);
			endif;
		endif;
		iter=iter+1;
	endwhile;
	  		
	iter=0;
	while(iter<10) do
		[DISK_MAP_TABLE+currentPID*10+iter]=-1;
		iter=iter+1;
	endwhile;
	return;
endif;
//------------------------------------------------------------------------------------
//---------------------------------Get PCB entry--------funcnum=1---------------------
if(funcNum==1) then

	alias freePCB_index R0;
	freePCB_index=-1;
	alias iter R3;
	iter=2;
	alias pcb_entry R4;
	while(iter<16) do
		if([PROCESS_TABLE+iter*16+4]==TERMINATED) then
			freePCB_index=iter;
			pcb_entry=PROCESS_TABLE+iter*16;
			[pcb_entry+1]=iter;
			[pcb_entry+4]=ALLOCATED;
			[pcb_entry+14]=PAGE_TABLE_BASE+iter*20;
			[pcb_entry+15]=10;
			return;
		endif;
		iter=iter+1;
	endwhile;
	return;
endif;

//----------------------------------KILL_ALL--------------------------------
if(funcNum==5) then
	alias iter R3;
	iter=0;
	while(iter<60) do 
		if([INODE_TABLE+iter*16+1]==-1) then

			multipush(R1,R2,R3);
			//aquiring inode
			R1=4;
			R2=[SYSTEM_STATUS_TABLE+1];
			R3=iter;
			call MOD_0;
			multipop(R1,R2,R3);
		endif;
		iter=iter+1;
	endwhile;
	//calling exit process function for all other process other than the current process, init and idle
	iter=2;
	while(iter<16) do

		if(iter!=[SYSTEM_STATUS_TABLE+1]&&[PROCESS_TABLE+iter*16+4]!=TERMINATED) then
			multipush(R1,R2,R3);
			R1=3;
			R2=iter;
			call MOD_1;
			multipop(R1,R2,R3);
		endif;
		iter=iter+1;
	endwhile;

	//releasing inodes
	iter=0;
	while(iter<60) do 
		if([INODE_TABLE+iter*16+1]==-1) then
			multipush(R1,R2,R3);
			//releasing inode
			R1=5;
			R2=[SYSTEM_STATUS_TABLE+1];
			R3=iter;
			call MOD_0;
			multipop(R1,R2,R3);
		endif;
		iter=iter+1;
	endwhile;
	return;
endif;