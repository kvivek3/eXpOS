alias userSP R0;
userSP = SP;

alias currentPID R1;
currentPID=[SYSTEM_STATUS_TABLE+1];

[PROCESS_TABLE + currentPID * 16 + 9] = 5;

[PROCESS_TABLE+currentPID*16+13]=SP;
SP=[PROCESS_TABLE+currentPID*16+11]*512-1;

alias fileDescriptor R2;
fileDescriptor=[[PTBR+(2*(userSP-4)/512)]*512+(userSP-4)%512];

alias PTE R10;
PTE=PROCESS_TABLE+currentPID*16;

if(fileDescriptor==-2) then
	alias word R3;
	word = [[PTBR+2*((userSP-3)/512)]*512+((userSP-3)%512)];
	
	//calling TERMINAL_WRITE function of device manager module
	multipush(R0,R1,R2,R3);

	R2=R1;
	R1=3;
	R3=R3;

	call MOD_4;

	multipop(R0,R1,R2,R3);
	
	//returning 0 on success
	[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=0;
else
	alias pprt R3;
	pprt=[PTE+11]*512+496;

	//if fileDescriptor is invalid or the entry in per process resource table does not indicate a file, return -1;
	if(fileDescriptor<0||fileDescriptor>7||[pprt+2*fileDescriptor]!=0) then
		[[PTBR+2*((userSP-1)/512)]*512+((userSP-1)%512)]=-1;
		[PTE+9]=0;
		SP=userSP;
		ireturn;
	endif;

	alias ofti R4;
	ofti=[pprt+2*fileDescriptor+1];

	alias inode_index R5;
	//inode_index is first entry of open file table
	inode_index=[OPEN_FILE_TABLE+4*ofti];

	//if the permission is EXCLUSIVE and current user does not own the file and is not the root user, return -3
	if([PTE+3]!=ROOT) then
		if([INODE_TABLE+inode_index*16+4]==EXCLUSIVE&&[PTE+3]!=[INODE_TABLE+inode_index*16+3]) then
			[[PTBR+2*((userSP-1)/512)]*512+((userSP-1)%512)]=-3;
			[PTE+9]=0;
			SP=userSP;
			ireturn;
		endif;
	endif;

	//aquiring inode
	multipush(R0,R1,R2,R3,R4,R5,R10);
	R2=currentPID;
	R1=4;
	R3=inode_index;
	call MOD_0;
	R6=R0;
	multipop(R0,R1,R2,R3,R4,R5,R10);

	//if aquire inode fails (it happens when file gets deleted before during busy bait), then return -1
	if(R6==-1) then
		[[PTBR+2*((userSP-1)/512)]*512+((userSP-1)%512)]=-1;
		[PTE+9]=0;
		SP=userSP;
		ireturn;
	endif;

	alias lseek R6;
	lseek=[OPEN_FILE_TABLE+ofti*4+2];

	//if maximum file size is reached, release inode and return -2
	if(lseek==MAX_FILE_SIZE) then
		//releasing inode
		multipush(R0,R1,R2,R3,R4,R5,R6,R10);
		R2=R1;
		R1=5;
		R3=inode_index;
		call MOD_0;
		multipop(R0,R1,R2,R3,R4,R5,R6,R10);

		[[PTBR+2*((userSP-1)/512)]*512+((userSP-1)%512)]=-2;
		[PTE+9]=0;
		SP=userSP;
		ireturn;
	endif;

	//if the lseek position is a multiple of 512 and the as file size in the inode table, then allocate new block
	if((lseek%512==0)&&(lseek==[INODE_TABLE+inode_index*16+2])) then
		alias freeblock R7;
		//calling get free block of memory manager module
		multipush(R0,R1,R2,R3,R4,R5,R6,R10);
		R1=3;
		call MOD_2;
		freeblock=R0;
		multipop(R0,R1,R2,R3,R4,R5,R6,R10);

		//if get free block fails, release inode and return -2
		if(freeblock==-1) then
			//releasing inode
			multipush(R0,R1,R2,R3,R4,R5,R6,R10);
			R2=R1;
			R1=5;
			R3=inode_index;
			call MOD_0;
			multipop(R0,R1,R2,R3,R4,R5,R6,R10);

			[[PTBR+2*((userSP-1)/512)]*512+((userSP-1)%512)]=-2;
			[PTE+9]=0;
			SP=userSP;
			ireturn;
		endif;
		[INODE_TABLE+16*inode_index+8+(lseek/512)]=freeblock;
	endif;

	alias blockNum R8;
	blockNum=[INODE_TABLE+16*inode_index+8+(lseek/512)];

	alias offset R9;
	offset=lseek%512;

	alias word R11;
	word=[[PTBR+2*((userSP-3)/512)]*512+((userSP-3)%512)];

	//calling buffered write
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
	R1=1;
	R2=blockNum;
	R3=offset;
	R4=word;
	call MOD_3;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);

	//if lseek equals file size, increment file size in inode table and root file
	if(lseek==[INODE_TABLE+inode_index*16+2]) then
		[INODE_TABLE+inode_index*16+2]=lseek+1;
		[ROOT_FILE+inode_index*8+2]=lseek+1;
	endif;
	[OPEN_FILE_TABLE+ofti*4+2]=[OPEN_FILE_TABLE+ofti*4+2]+1;
		
	//releasing inode
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
	R2=R1;
	R1=5;
	R3=inode_index;
	call MOD_0;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
endif;

//returning 0 on success
[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=0;
SP=userSP;
[PTE+9]=0;
ireturn;