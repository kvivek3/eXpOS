alias userSP R0;
userSP=SP;
alias currentPID R1;
currentPID=[SYSTEM_STATUS_TABLE+1];
alias PTE R2;
PTE=PROCESS_TABLE+currentPID*16;

//switching to kernel stack
[PTE+13]=SP;
SP=[PTE+11]*512-1;

alias SysCallNum R3;
SysCallNum=[[PTBR+2*((userSP-5)/512)]*512+(userSP-5)%512];
alias filename R4;
filename=[[PTBR+2*((userSP-4)/512)]*512+(userSP-4)%512];

//-----------------CREATE_SYSTEM_CALL----------------------------------------
if(SysCallNum==1) then
	[PTE+9]=1;
	alias iter R5;
	//checking if the file is already present in system
	//if it is, returning 0
	iter=0;
	while(iter<60) do
		if([INODE_TABLE+iter*16]==DATA&&[INODE_TABLE+iter*16+1]==filename) then
			[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=0;
			[PTE+9]=0;
			SP=userSP;
			ireturn;
		endif;
		iter=iter+1;
	endwhile;
	alias inode_index R6;
	inode_index=-1;
	//finding a free entry
	iter=0;
	while(iter<60) do
		if([INODE_TABLE+iter*16+1]==-1) then
			inode_index=iter;
			break;
		endif;
		iter=iter+1;
	endwhile;

	//if no free entry is found, return -1;
	if(inode_index==-1) then
		[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-1;
		[PTE+9]=0;
		SP=userSP;
		ireturn;
	endif;

	alias inode_entry R7;
	inode_entry=INODE_TABLE+inode_index*16;

	//setting the filename
	[inode_entry+1]=filename;

	//setting filesize to 0
	[inode_entry+2]=0;

	//filetype data
	[inode_entry]=DATA;

	iter=0;
	while(iter<4) do
		[inode_entry+8+iter]=-1;
		iter=iter+1;
	endwhile;

	//userid from process table
	[inode_entry+3]=[PTE+3];

	alias permission R8;
	permission=[[PTBR+2*((userSP-3)/512)]*512+(userSP-3)%512];

	//permission
	[inode_entry+4]=permission;

	//setting root file entries
	alias root_entry R9;
	root_entry=ROOT_FILE+inode_index*8;

	//filename
	[root_entry]=filename;
	//filesize
	[root_entry+1]=0;
	//filetype
	[root_entry+2]=DATA;
	//username
	[root_entry+3]=[USER_TABLE+[PTE+3]*2];
	//permission
	[root_entry+4]=permission;
endif;

//------------------DELETE_SYSTEM_CALL------------------------------------
if(SysCallNum==4) then
	[PTE+9]=4;
	alias iter R5;
	alias inode_index R6;
	inode_index=-1;
	iter=0;
	while(iter<60) do
		if([INODE_TABLE+iter*16+1]==filename) then
			inode_index=iter;
			break;
		endif;
		iter=iter+1;
	endwhile;
	//file is not found
	if(inode_index==-1) then
		[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=0;
		[PTE+9]=0;
		SP=userSP;
		ireturn;
	endif;
	alias inode_entry R7;
	inode_entry=INODE_TABLE+16*inode_index;
	if([inode_entry]!=DATA) then
		[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-1;
		[PTE+9]=0;
		SP=userSP;
		ireturn;
	endif;

	//if the permission is exclusive current user is not root and does not own the file, return -2
	if([inode_entry+4]==EXCLUSIVE) then
		if([PTE+3]!=1&&[PTE+3]!=[inode_entry+3]) then
			[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-1;
			[PTE+9]=0;
			SP=userSP;
			ireturn;
		endif;
	endif;

	//aquiring inode, calling AQUIRE INODE of resource manager module
	multipush(R0,R1,R2,R3,R4,R5,R6,R7);
	R2=currentPID;
	R1=4;
	R3=inode_index;
	call MOD_0;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7);

	//if the file is open, release the lock and return -2
	if([FILE_STATUS_TABLE+inode_index*4+1]!=-1) then
		
		//releasing the lock
		[FILE_STATUS_TABLE+inode_index*4]=-1;
		SP=userSP;
		[PTE+9]=0;
		[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-2;
		ireturn;
	endif;
	iter=0;
	//CHECK
	alias blockNum R8;
	alias buffer_index R9;
	while(iter<4) do
		blockNum=[inode_entry+8+iter];
		if(blockNum!=-1) then
			buffer_index=blockNum%4;
			if([BUFFER_TABLE+4*buffer_index]==blockNum) then
				[BUFFER_TABLE+4*buffer_index+1]=0;
			endif;

			//releasing the block, calling release block of memory manager module
			multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
			R3=currentPID;
			R1=4;
			R2=blockNum;
			call MOD_2;
			multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
			iter=iter+1;
		endif;
		iter=iter+1;
	endwhile;

	//invalidating inode
	[inode_entry+1]=-1;

	//updating root file
	[ROOT_FILE+8*inode_index]=-1;

	//calling release inode
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
	R2=currentPID;
	R1=5;
	R3=inode_index;
	call MOD_0;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
endif;
SP=userSP;
[PTE+9]=0;
[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = 0;
ireturn;